`timescale 1ns/1ps
module macc #(
    parameter WIDTH_0 = 16,
    parameter WIDTH_1 = 16,
    parameter WIDTH_OUT = 16,
    parameter TYPE = "FIXED_POINT"
) (
    input  wire                     CLK,
    input  wire                     RESET,
    input  wire [CTRL_WIDTH-1  :0]  MACC_CTRL,
    input  wire [WIDTH_0-1     :0]  MUL_0,
    input  wire [WIDTH_1-1     :0]  MUL_1,
    input  wire [WIDTH_OUT-1   :0]  ADD,
    output wire [WIDTH_OUT-1   :0]  OUT
);

// ******************************************************************
// LOCALPARAMS
// ******************************************************************
    localparam integer CTRL_WIDTH = 4;
// ******************************************************************
// WIRES
// ******************************************************************
    wire enable = MACC_CTRL[0];
    wire mul= MACC_CTRL[1];
    wire accumulate = MACC_CTRL[2];
    wire is_normalization = MACC_CTRL[3];
    wire [WIDTH_OUT-1:0] GND = 'b0;
    reg  [WIDTH_0-1:0] A_d;
    reg  [WIDTH_1-1:0] B_d;
    reg  [WIDTH_OUT-1:0] C_d;
    reg  [WIDTH_OUT-1:0] C_dd;
    reg  [WIDTH_OUT-1:0] product;
    wire [WIDTH_OUT-1:0] data_ADD;
    reg  [CTRL_WIDTH-1:0] macc_ctrl_d;
    reg  [CTRL_WIDTH-1:0] macc_ctrl_dd;
    reg  [WIDTH_OUT-1:0]  OUT_reg;
// ******************************************************************
// LOGIC
// ******************************************************************

generate
if (TYPE == "FLOATING_POINT") begin
    float_point 
    float_point_i (
        .A_data     ( MUL_0     ),
        .A_valid    ( 1'b1      ),
        .B_data     ( MUL_1     ),
        .B_valid    ( 1'b1      ),
        .C          ( ADD       ),                  
        .C_valid    ( 1'b1      ),
        .Out_data   ( OUT       ),
        .Out_valid  (           ),
        .aclk       ( CLK       ),
        .aclken     ( RESET     )
    );

end else begin
// TIER 4 Regs
    always @(posedge CLK)
    begin
        if (RESET) begin
            A_d <= 0;
            B_d <= 0;
            C_d <= 0;
            macc_ctrl_d <= 0;
        end else begin
            macc_ctrl_d <= MACC_CTRL;
            if (enable) begin
                A_d <= MUL_0;
                B_d <= (is_normalization)? MUL_0 : MUL_1;
                C_d <= ADD;
            end else begin
                A_d <= 0;
                B_d <= 0;
                C_d <= 0;
            end
        end
    end
    
    // TIER 5 Regs
    wire enable_d = macc_ctrl_d[0];
    always @(posedge CLK)
    begin
        if (RESET) begin
            product <= 0;
            C_dd <= 0;
            macc_ctrl_dd <= 0;
        end else begin
            if (enable_d) begin
                product <= A_d * B_d;
                C_dd <= C_d;
            end else begin
                product <= 0;
                C_dd <= 0;
            end
            macc_ctrl_dd <= macc_ctrl_d;
        end
    end

    //--// TIER 6 Regs
    wire enable_dd = macc_ctrl_dd[0];
    wire mul_dd = macc_ctrl_dd[1];
    wire accumulate_dd = macc_ctrl_dd[2];
    //assign data_ADD = !mul_dd ? (accumulate_dd ? OUT : C_dd) : GND[WIDTH_OUT-1:0];
    assign data_ADD = !mul_dd ? (accumulate_dd ? OUT : C_d) : GND[WIDTH_OUT-1:0];
    //assign data_ADD = C_dd;
    always @(posedge CLK)
    begin
        if (!RESET && enable_dd) begin
            OUT_reg <= product + data_ADD;
        end else begin
            OUT_reg <= 0;
        end
    end

    assign OUT = OUT_reg;

    //assign data_ADD = !mul ? (accumulate ? OUT : ADD) : GND[WIDTH_OUT-1:0];
    //always @(posedge CLK) 
    //begin
    //    if (!RESET) begin
    //        if (enable)
    //            OUT <= MUL_0 * MUL_1 + data_ADD;
    //        else
    //            OUT <= OUT;
    //    end else begin
    //        OUT <= 0;
    //    end
    //end
end
endgenerate

endmodule
